{"ast":null,"code":"var _jsxFileName = \"G:\\\\Perso\\\\Formation\\\\Informatique\\\\SauvegardeSite\\\\RemoteGithub\\\\meteo\\\\meteo-app\\\\src\\\\Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = () => {\n  _s();\n  const [city, setCity] = useState('Paris');\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const apiKey = '41386ebcf05aed7668ba7df59987760f'; // Remplace par ta clé API OpenWeatherMap\n\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`);\n        if (!response.ok) throw new Error('Données non disponibles');\n        const data = await response.json();\n        setWeatherData(data);\n      } catch (error) {\n        setError('Erreur de récupération des données météo');\n      }\n      setLoading(false);\n    };\n    fetchWeatherData();\n  }, [city]);\n  const handleCityChange = event => setCity(event.target.value);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Application M\\xE9t\\xE9o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Entrez une ville\",\n      value: city,\n      onChange: handleCityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Chargement...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weatherData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temp\\xE9rature: \", weatherData.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weatherData.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"wKxEzJ32l501xzmuruTuN7PZss8=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Weather","_s","city","setCity","weatherData","setWeatherData","loading","setLoading","error","setError","apiKey","fetchWeatherData","response","fetch","ok","Error","data","json","handleCityChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","name","main","temp","weather","description","_c","$RefreshReg$"],"sources":["G:/Perso/Formation/Informatique/SauvegardeSite/RemoteGithub/meteo/meteo-app/src/Weather.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst Weather = () => {\r\n  const [city, setCity] = useState('Paris');\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const apiKey = '41386ebcf05aed7668ba7df59987760f';  // Remplace par ta clé API OpenWeatherMap\r\n\r\n  useEffect(() => {\r\n    const fetchWeatherData = async () => {\r\n      setLoading(true);\r\n      setError('');\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`\r\n        );\r\n        if (!response.ok) throw new Error('Données non disponibles');\r\n        const data = await response.json();\r\n        setWeatherData(data);\r\n      } catch (error) {\r\n        setError('Erreur de récupération des données météo');\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchWeatherData();\r\n  }, [city]);\r\n\r\n  const handleCityChange = (event) => setCity(event.target.value);\r\n\r\n  return (\r\n    <div className=\"weather-container\">\r\n      <h1>Application Météo</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Entrez une ville\"\r\n        value={city}\r\n        onChange={handleCityChange}\r\n      />\r\n      {loading && <p>Chargement...</p>}\r\n      {error && <p>{error}</p>}\r\n      {weatherData && (\r\n        <div>\r\n          <h2>{weatherData.name}</h2>\r\n          <p>Température: {weatherData.main.temp}°C</p>\r\n          <p>{weatherData.weather[0].description}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}